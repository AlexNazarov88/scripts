#!/usr/bin/python
# -*- coding: utf-8 -*-

# Скрипт пробегается по папке с текстурами моделей
# и изменяет файл с ресурсами персонажей в доме (Pers_Resource.xml)
# Нужно запускать при удалении или добавлении текстур моделей

import os
import xml.etree.ElementTree as xml
from PIL import Image
from distutils.util import strtobool

def query_yes_or_no(message):
	print '{} [y/n]'.format(message)
	while True:
		try:
			return strtobool(raw_input().lower())
		except ValueError:
			print 'Answer \'y\' or \'n\''

def check_and_resize(imagepath):
	max_texture_size = 256
	fullpath = os.path.join('../base_mm/textures/Models', imagepath)
	image = Image.open(fullpath)
	width, height = image.size
	if (width > max_texture_size) or (height > max_texture_size):
		if query_yes_or_no('{} is too large {}x{}. Downsize?'.format(imagepath, width, height)):
			new_width = new_height = max_texture_size
			if width > height:
				new_height = new_width * height / width
			else:
				new_width = new_height * width / height
			image = image.resize((new_width, new_height), Image.ANTIALIAS)
			image.save(fullpath)
			print 'Saving {} {}x{}'.format(imagepath, new_width, new_height)

def indent(elem, level=0):
	i = '\r\n' + level * '\t'
	if len(elem):
		if not elem.text or not elem.text.strip():
			elem.text = i + '\t'
		if not elem.tail or not elem.tail.strip():
			elem.tail = i
		for elem in elem:
			indent(elem, level + 1)
		if not elem.tail or not elem.tail.strip():
			elem.tail = i
	else:
		if level and (not elem.tail or not elem.tail.strip()):
			elem.tail = i

# открываем файл
xml_doc = xml.parse('../base_mm/Pers_Resource.xml')
xml_resources = xml_doc.getroot()

# находим группу текстур. Это будет первая группа текструр в файле!
xml_textures = xml_resources.find('Textures')
if xml_textures is not None:
	# удаляем
	xml_resources.remove(xml_textures)
# создаем новый
xml_textures = xml.Element('Textures', {'basePath':'textures/Models/', 'group':'Garden-LoadOnDemand', 'pack':'false', 'upload':'false'})
# добавляем в начало файла, т.к. модели сами создают текстуры, если не находят их в уже существующих ресурсах
xml_resources.insert(0, xml_textures)
# запись на то, что это автогенерируемая часть файла
warn = xml.Comment('This autogenerated part, your changes may be lost !!!')
xml_textures.append(warn)

# пробегаемся по папке с текстурами
for root, dirs, files in os.walk('../base_mm/textures/Models'):
	#relpath = os.path.relpath(root, base)
	for filepath in files:
		filename, file_extension = os.path.splitext(filepath)
		if file_extension == '.png' or file_extension == '.jpg' or file_extension == '.webp':
			# если текстура большая, то запросить разрешение на уменьшение и уменьшить
			check_and_resize(filepath);
			# в данной папке все файлы лежат в одной директории, при обоходе поддиректорий, нужно будет поправить тут filename
			xml.SubElement(xml_textures, 'texture', {'id': filepath, 'path': filename})

	warn = xml.Comment('End of autogenerated part')
	xml_textures.append(warn)

# сохраняем
indent(xml_resources)
data = xml.tostring(xml_resources, 'utf-8')
data_file = open('../base_mm/Pers_Resource.xml','wb')
data_file.write("<?xml version='1.0' encoding='UTF-8'?>\r\n")
data_file.write(data)
data_file.close()

print 'ok'

raw_input('\nPress ENTER to continue...')
